1 2 3 4 5 6 7 8 9 0
-1 -2 -3 -4 0

Run this example with:
    java Demo demo2.txt

The first tree (with keys 1-9) should look like this:

 0:     1
 1:   2
 2:     3
 3: 4
 4:     5
 5:   6
 6:       7
 7:     8
 8:       9

After deleting keys 1-4, the remaining tree looks like this:

 0:   5
 1: 6
 2:     7
 3:   8
 4:     9


See full correct output below:

$ java Demo demo2.txt
AVLTree t is empty, enter a sequence of integers:
  enter positive integer  K to do t.insert(K)
  enter negative integer -K to do t.remove(K)
  enter 0 to do t.printTree() and t.testAVL()
  anything else to quit
t.insert(1) returns true
t.insert(2) returns true
t.insert(3) returns true
t.insert(4) returns true
t.insert(5) returns true
t.insert(6) returns true
t.insert(7) returns true
t.insert(8) returns true
t.insert(9) returns true
Tree has 9 nodes:
 0:     1
 1:   2
 2:     3
 3: 4
 4:     5
 5:   6
 6:       7
 7:     8
 8:       9
End.
t.testAVL() found no problems
t.remove(1) returns true
t.remove(2) returns true
t.remove(3) returns true
t.remove(4) returns true
Tree has 5 nodes:
 0:   5
 1: 6
 2:     7
 3:   8
 4:     9
End.
t.testAVL() found no problems
